#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

is_conda_env() {
    [[ -n "$CONDA_DEFAULT_ENV" ]] || [[ -n "$CONDA_PREFIX" ]]
}

is_venv() {
    [[ -n "$VIRTUAL_ENV" ]]
}

find_repo_root() {
    local dir="$PWD"
    while [[ "$dir" != "/" ]]; do
        if [[ -d "$dir/.git" ]]; then
            echo "$dir"
            return 0
        fi
        dir="$(dirname "$dir")"
    done
    return 1
}

get_current_project() {
    local repo_root
    repo_root=$(find_repo_root)
    if [[ $? -ne 0 ]]; then
        log_error "Not in a git repository"
        return 1
    fi
    
    local current_dir="$PWD"
    local relative_path="${current_dir#$repo_root/}"
    
    if [[ "$relative_path" == "$current_dir" ]]; then
        echo "root"
        return 0
    fi
    
    echo "${relative_path%%/*}"
}

find_dependency_files() {
    local files=()
    
    [[ -f "pyproject.toml" ]] && files+=("pyproject.toml")
    [[ -f "environment.yml" ]] && files+=("environment.yml")
    [[ -f "requirements.txt" ]] && files+=("requirements.txt")
    [[ -f "Pipfile" ]] && files+=("Pipfile")
    [[ -f "setup.py" ]] && files+=("setup.py")
    
    printf '%s\n' "${files[@]}"
}

# Install using conda
install_conda() {
    local file="$1"
    case "$file" in
        "environment.yml")
            log_info "Installing conda environment from $file..."
            conda env update -f "$file"
            ;;
        "requirements.txt")
            log_info "Installing Python packages with conda from $file..."
            conda install --file "$file" -y
            ;;
        *)
            log_warning "Using pip within conda environment for $file..."
            install_pip "$file"
            ;;
    esac
}

# Install using pip/venv
install_pip() {
    local file="$1"
    case "$file" in
        "requirements.txt")
            log_info "Installing Python packages with pip from $file..."
            pip install -r "$file"
            ;;
        "pyproject.toml")
            log_info "Installing Python project from pyproject.toml..."
            pip install -e .
            ;;
        "setup.py")
            log_info "Installing Python project from setup.py..."
            pip install -e .
            ;;
        *)
            log_error "Unsupported dependency file: $file"
            return 1
            ;;
    esac
}

main() {
    log_info "Auto-detecting project and dependencies..."
    
    local project
    project=$(get_current_project)
    if [[ $? -ne 0 ]]; then
        exit 1
    fi
    
    log_info "Current project: $project"
    
    if is_conda_env; then
        log_info "Detected conda environment: $CONDA_DEFAULT_ENV"
        ENV_TYPE="conda"
    elif is_venv; then
        log_info "Detected virtual environment: $(basename $VIRTUAL_ENV)"
        ENV_TYPE="venv"
    else
        log_info "Using system environment"
        ENV_TYPE="system"
    fi
    
    local dep_files
    readarray -t dep_files < <(find_dependency_files)
    
    if [[ ${#dep_files[@]} -eq 0 ]]; then
        log_warning "No dependency files found in current directory"
        log_info "Looked for: pyproject.toml, environment.yml, requirements.txt, Pipfile, setup.py, package.json, renv.lock, DESCRIPTION"
        exit 1
    fi
    
    log_info "Found dependency files: ${dep_files[*]}"
    
    local installed=false
    for file in "${dep_files[@]}"; do
        log_info "Processing $file..."
        
        case "$file" in
            "environment.yml")
                if [[ "$ENV_TYPE" == "conda" ]] || command -v conda >/dev/null 2>&1; then
                    install_conda "$file" && installed=true
                    break
                fi
                ;;
            "pyproject.toml"|"requirements.txt"|"setup.py")
                if [[ "$ENV_TYPE" == "conda" ]]; then
                    install_conda "$file" && installed=true
                elif [[ "$ENV_TYPE" == "venv" ]] || command -v pip >/dev/null 2>&1; then
                    install_pip "$file" && installed=true
                fi
                break
                ;;
        esac
    done
    
    if [[ "$installed" == true ]]; then
        log_success "Dependencies installed successfully!"
    else
        log_error "Failed to install dependencies. Please check your environment and dependency files."
        exit 1
    fi
}

main "$@" 